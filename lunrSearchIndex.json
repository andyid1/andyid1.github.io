[{"id":"itemfe4da09a-b9cf-483d-b2d5-6","title":"Welcome","created":1689962391,"location":"item-fe4da09a-b9cf-483d-b2d5-6397785f61fe","description":"Welcome to your new HAX site! Click edit on the top bar to get started\nThis is a boilerplate so that you can add and make new things from the npx @haxtheweb/haxcms-nodejscommand\nWhat can I do?\nWe've ","text":"welcome to your new hax site! click edit on the top bar get started\r\n\r\n\r\nthis is a boilerplate so that you can add and make things from npx @haxtheweb/haxcms-nodejscommand\r\nwhat i do?\r\nweve got ton of blocks are easy use lot done with little effort, much in fact we made video exploring some them!\r\nhere's list just few started, or if pro, delete this content have fun!\r\n  \r\n by hitting \"edit page\" above\r\n hit enter paragraph text another one\r\n \"merlin\" see all do\r\n try video, insert video\r\n \r\n\r\n\r\n\r\n\r\n\r\nthis looks fun, let's go!\r\n\r\n you, while using hax\r\n ...probably\r\nget involved hax\r\n\r\n \r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nwe hope enjoy working as team has enjoyed building it! want join our community, look for discord link among other ways involved!\r\n\r\n read teaching excellence resources\r\n community\r\n post an issue queue"},{"id":"item11ac110a-d9d7-4917-92b6-2","title":"1. Belajar Fundamental Front-End Web Development.docx","created":1723822091,"location":"item-11ac110a-d9d7-4917-92b6-2bea37e917e1","description":"","text":"ecmascript 6pendahuluan 6bahasa javascript didefinisikan dalam standarÂ ecma-262. bahasa yang menggunakan standar ini disebut dengan ecmascript. browser dan node.js adalah contoh implementasi dari ecma-262/ecmascript. kedua platform tersebut (browser node.js) fungsionalitas berbeda. bagi browser, digunakan untuk membantu website menjadi lebih interaktif. sedangkan node.js, pengembangan aplikasi diluar seperti server, desktop, mobile, bahkan game. sehingga memberikan lain menambahkan objek method sesuai kebutuhan masing - masing.namun kembali lagi, bahwa inti itu sendiri tak heran, ecma-262 sangat vital menentukan kesuksesan javascript.sejarah singkat javascriptmenurut sejarah, sebenarnya pada tahun 1995 netscape melahirkan pemrograman nama âlivescriptâ, namun saat java sedang populer.Â netscape sun selaku pengembang (saat oracle) melakukan perjanjian lisensi mengubah penamaan livescript javascript. setelah diadopsi di luar netscape, distandarisasi oleh european computer manufacturerâs association (ecma). itulah sebabnya terkadang ada menyebutnya ecmascript.terdapat beberapa versi 2000 2010, 3 (es3) merupakan banyak ketika mendominasi. selama waktu tersebut, 4 (es4) proses harapan akan improvisasi cukup signifikan, ambisi tidak berjalan mulus 2008 es4 ditinggalkan.Â walaupun begitu, bukan akhir digantikan 5 (es5) mengurangi ambisinya. apa? perbaikan hanya terbatas hal non-kontroversial. pembaruan berhasil akhirnya es5 pun rilis 2009.akhirnya 2015Â ecmascript 6 (es6)Â rilis membawa perubahan besar termasuk ide sudah direncanakan 4.saat menyentuh 10 (es10), tetapi mulai es6, update tahunan bersifat minor. kita bisa lihat rincian updatenya lamanÂ wikipediaÂ berikut.pada modul kali membahas deklarasi variabel, template string, function syntax, class, promise, hingga module.menjalankan potongan kodedalam pembelajaran ke depan berhadapan potongan-potongan kode. anda dianjurkan menjalankannya agar memahami materi disampaikan.bagi familiar menjalankan kode diberikan mengeksekusinya berkas (.js).Â bagaimana jika belum node.js? onlineÂ repl.it. apa itu? repl.it sebuah coding secara online. repl.it, dapat menuliskan itu.terdapat sekali didukung ini, antaranya javascript, html css.pada tiap pembahasan materi, kami menyediakan tautan mengarahkan ada. contohnya:di sana menyalin pilih berkasÂ index.js.cukup mudah bukan? siap belajar? yuk lanjut selanjutnya!persiapan proyek latihansebelum fitur sintaks 2015 (es6). pembelajarannya nanti, mengimplementasikan dipelajari melalui sederhana bernama âclub finderâ. namanya, berfungsi pencarian klub olahraga, baik basket, sepak bola, dsb.Â saat diharapkan. penulisan dituliskan 2015. tugas anda! sambil belajar terbaru 2015, juga menerapkan ilmu pelajari sederhana. itu, mari persiapkan dulu kebutuhannya.Â silakan unduh project starter link berikut ini: clubfinder download.setelah mengunduh silakan extract zip. kemudian komputer terdapat satu folder âclubfinderâ.jika berhasil, menghapus zip tadi.Â kemudian buka text editor miliki. contohnya sini gunakan visual studio code.pada editor, melihat bagaimana club finder dibangun. dibangun html, css murni tanpa bantuan framework bootstrap, ataupun jquery. lulus kelas membuat front-end web pemulaÂ dengan baik, membuatnya.sekarang milik anda. bebas bereksplorasi mengetahui logika dalamnya. seiring ikuti, cobalah 2015.sudah siap? cara baru mendeklarasikan variabel.deklarasi variabelpotongan https://repl.it/@dicodingacademy/163-02-variable-declaration?lite=trueawalnya variabel agak sedikit rumit. dikarenakan berbeda berbasis c umumnya tersedia blok ia dibuat. kasus selalu benar. dibuat tergantung mendeklarasikannya. membingungkan jangan khawatir, bahas masalah detail.deklarasi var hoistingvariabel dideklarasikan diangkat tingkatan atas fungsi walaupun menuliskannya fungsi. pengangkatan hoisting.Â perhatikan berikut:function maketea(iscold) {Â  if (iscold) Â  varÂ tea =Â make an ice tea!';Â  }Â elseÂ {Â   Â varÂ tea =Â 'make a hot }Â  returnÂ tea;}console.log(maketea(false));/* output:make tea!*/kode menghasilkan outputÂ âmake tea!â. mengapa demikian? padahal tea else. seharusnya mengaksesnya error:referenceerror: is not definednah, inilah dapatkan keyword variabel. belakang layar, mengangkat berada maketea. begitu berikut.function maketea = '';Â  Â tea tea!*/bahkan karena hoisting menginisialisasi nilai sebelum dideklarasikan. masuk akal, contohnya.function getfood() food =Â 'choocolate';Â  console.log(food);Â  varÂ food;}getfood();/* output:choocolate*/proses kontroversial jarang developer bingung ini.let constsejak selain var, menginisialisasikan let const. es6 kontroversial, salah satunya tadi.variabel atau const menghilangkan permasalahan cakupan block (sama c), perhatikan berikut. sebelumnya variabel:function 'make tea!';Â Â } else return tea;}Â console.log(maketea(false));Â /* output:referenceerror: defined*/variabel diakses terhenti tempat biasa temporal dead zone dideklarasi. mencoba melakukannya maka eror sama.function letÂ food;}getfood();/* defined*/let solusi menjadikan ketat pendeklarasian meminimalisir peluang terjadinya bug.aturan penggunaan constsetelah harus daripada lantas perbedaan sendiri? kapan const? pula sebaliknya.variabel memiliki kesamaan karakteristik. persamaannya ulang sama (kita var). kasusnya.letletÂ name =Â 'john';letÂ name =Â 'doe';console.log(name);/* error:syntaxerror: identifier 'name' has already been declared*/constconstÂ name =Â 'john';constÂ name declared*/perbedaan antara let, diinisialisasi nilainya. bisa, pastikan langsung tersebut. kasusnya.letlet name 'john';name output:doe*/constconst error:typeerror: assignment to constant variable.*/jadi, intinya aturan umum penggunaanya sebagai berikut:gunakan diinisialisasikan nilainya.Â gunakan nilainya.const paling memang berencana nilainya.ada catatan perbedaannya jelas array objek.menginisialisasikan ulangarrayconst fruits ['apple', 'orange'];fruits ['apple',Â 'orange',Â 'banana'];console.log(fruits);/* outputtypeerror: variable. */objectconst people { name: 'john', age: 18 };people name:Â 'john', age:Â 18, regency:Â 'bandung'Â };console.log(people);/* typeerror: */mengubaharrayconst 'orange'];fruits.push('banana');console.log(fruits);/* output:[ \"apple\", \"orange\", \"banana\" ]Â */objectconst };people.regency =Â 'bandung';console.log(people);/* output:{ \"john\", 18, regency: \"bandung\" }*/membuat read-only, tapi berarti diubah mungkin menampung primitif number, boolean sulit nilainya inisialisasi ulang.latihan: variabelselamat! sekarang es6. nah saatnya terapkan finder.Â saat penerapan seluruhnya keywordÂ var. kan akibat dihadapi menggunakanÂ var? ubahlah seluruh es6.good luck for your first duty!solusi: variabelapakah es6? belum, lakukan bersama-sama.jika ada, masih menggunakanÂ var. berkasÂ main.js,Â clubs.js, ataupunÂ data-source.js.main.jsdata-source.jsclubs.jsvar main () searchelement document.queryselector('#searchelement'); buttonsearchelement document.queryselector('#searchbuttonelement'); clublistelement document.queryselector('#clublist');Â Â  onbuttonsearchclicked datasource new datasource(renderresult, fallbackresult); datasource.searchclub(searchelement.value); };Â  renderresult (results) clublistelement.innerhtml ''; results.foreach(function (club) club.name; fanart club.fanart; description club.description;Â  clubelement document.createelement('div'); clubelement.setattribute('class', 'club');Â  clubelement.innerhtml '&lt;img class=\"fan-art-club\" src=\"' + '\" alt=\"fan art\"&gt;\\n' '&lt;div class=\"club-info\"&gt;\\n' '&lt;h2&gt;' '&lt;/h2&gt;\\n' '&lt;p&gt;' '&lt;/p&gt;' '&lt;/div&gt;'; clublistelement.appendchild(clubelement); }) fallbackresult (message) += '&lt;h2 class=\"placeholder\"&gt;' message '&lt;/h2&gt;' buttonsearchelement.addeventlistener('click', onbuttonsearchclicked);};mari ubah deklarasinya menggunakanÂ const. mengapaÂ const? telaah baris berupa statement jadi, alasan gunakanÂ letÂ pada ini.setelah kodeÂ main.js,Â clubs.js, danÂ data-source.jsÂ akan tampak ini:main.jsdata-source.jsclubs.jsconst document.queryselector('#clublist'); }); }; onbuttonsearchclicked);};bagaimana guna memastikan benar? coba berkasÂ index.htmlÂ pada browser. lancar, diterapkan baik.namun, lancar error padaÂ console browser? malu bertanya forum diskusi ya!langkah solution temukan repository berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/102-club-finder-variable-declaration-solutionsolusi: literalsapakah literals pengelolaan string? bersama-sama.yang pertama, berkasÂ main.js, tepatnya fungsiÂ renderresultÂ kita berikut:clubelement.innerhtml '&lt;/div&gt;';dengan ini:clubelement.innerhtml `Â  &lt;img src=\"${fanart}\" art\"&gt;Â  &lt;div class=\"club-info\"&gt;Â  Â &lt;h2&gt;${name}&lt;/h2&gt;Â  Â &lt;p&gt;${description}&lt;/p&gt; &lt;/div&gt;`;lalu fungsiÂ fallbackresultÂ ini:clublistelement.innerhtml '&lt;/h2&gt;';menjadi ini:clublistelement.innerhtml `&lt;h2 class=\"placeholder\"&gt;${message}&lt;/h2&gt;`;template templating menyisipkan expression dalamnya mudah.terakhir, sebaiknya berkasÂ data-source.js. fungsiÂ searchclub.this.onfailed(keyword 'Â is found');menjadi:this.onfailed(`${keyword} found`);untuk benar, baik.namun console berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/103-club-finder-template-literals-solutiondestructuring object arraypotongan ini:Â object destructuring:Â https://repl.it/@dicodingacademy/163-02-destructuring-object?lite=truearray destructuring:Â https://repl.it/@dicodingacademy/163-02-destructuring-array?lite=trueliterasi dua mengelola data javascript.Â jsonÂ (javascript notation) format populer transaksi ini.[ \"id\": 14, \"title\": \"menjadi android expert\", \"author\": \"google atp\" }, 51, \"belajar pemula\", 74, \"membangun progressive apps\", \"codepolitan\" 123, dasar web\", \"dicoding indonesia\" }]jika strukturÂ jsonÂ di atas, menyimpulkan struktur objek. memudahkan developer, mendestrukturkan array.tapi sebenarnyaÂ destructuring objectÂ danÂ arrayÂ itu?Â destructuringÂ pada mengeluarkan properties satuan kecil.secara sadar pernah melakukanÂ destructuring, dilakukan ini:arrayobjectconst foods ['pie', 'cake', 'honey'];Â constÂ myfood foods[0];constÂ yourfood foods[1];constÂ ourfood foods[2];Â console.log(myfood, yourfood, ourfood);Â /* output:pie cake honey*/perhatikan padaÂ destructuring objectÂ di atas. mengekstraksi arrayÂ foodÂ dan objekÂ profile. kemudian, setiap item disimpan lokal properti (key) objekÂ profileÂ (terkecuali array, key index). langkah terlihat mudah. namun, bayangkan manual persatu, terlalu berulang, kan?itulah untukÂ destructuringÂ objek maupun array. ingin memecah bagian-bagian kecil, dipermudah mendapatkan diinginkan.lantas destructuring es6?latihan: objectselamat! sejauh nah, finder.saat mana ini:const club.name;constÂ fanart club.fanart;const club.description;kode berkasÂ main.js. fungsiÂ renderresult.tugas penerapannya teknikÂ destructuring objectÂ pada luck!destructuring arraydestructuring serupa object. tanda kurung kurawal } siku [ ]. lainnya bekerja berdasarkan posisi propertinya. es6:const favorites ['seafood', 'salad', 'nugget', 'soup'];Â constÂ [firstfood, secondfood, thirdfood, fourthfood] favorites;Â console.log(firstfood);console.log(secondfood);console.log(thirdfood);console.log(fourthfood);Â /* output:seafoodsaladnuggetsoup*/contoh prosesÂ destructuring (favorites) (empat) string masing-masing dimasukkan lokalÂ firstfood,Â secondfood,Â thirdfood, danÂ fourthfood. dipilih notasi.Â const [firstfood, favorites;sebenarnya saja. terpenting urutan variabelnya saja.kita memilih padaÂ indexÂ tertentu didestruksikan mengambil ketiga perlu menyiapkan kedua, ke-empat. membiarkanÂ indexÂ array inginkan tetap kosong (tanpa menulis lokal). lanjut, koma (,) diperlukan menunjukkan posisiÂ index-nya 'soup'];Â constÂ [, , thirdfood] favorites;Â console.log(thirdfood);Â /* output:nugget*/destructuring assignmentkita melakukanÂ destructuring assignmentÂ pada objek, membungkusnya kurung. berikut:const 'soup'];Â letÂ myfood =Â 'ice cream';letÂ herfood =Â 'noodles';Â [myfood, herfood] favorites;Â console.log(myfood);console.log(herfood);Â /* output:seafoodsalad*/arrayÂ destructuring assignmentÂ sangat berguna hendak menukar antar algoritma sorting ini:var 1;varÂ b =Â 2;varÂ temp;Â console.log('sebelum swap');console.log('nilai a:Â 'Â + a);console.log('nilai b:Â 'Â + b);Â temp a;a b;b temp;Â console.log('setelah b);Â /* output:sebelum swapnilai a: 1nilai b: 2setelah 2nilai 1*/untuk pertukaran nilai, membutuhkan penengah. adalahÂ temp. penengah dibutuhkan menyimpan sementara ditukar. kurang efektif sementara.dengan arrayÂ destructuring assignmentÂ kita ekstra. Â let 1;letÂ b=Â 2;Â console.log('sebelum b);Â [a, b] [b, a]Â console.log('setelah outputsebelum 1*/default valuesketika posisinya terjangkau bernilaiÂ undefined. contohnya:const ['seafood'];Â constÂ [myfood, favoritesÂ console.log(myfood);console.log(herfood);Â /* output:seafoodundefined*/seperti arrayÂ destructuringÂ kita default menjadiÂ undefined.const herfood =Â 'salad'] output:seafoodsalad*/spreading operator rest parameterpotongan ini:spreading operator:Â https://repl.it/@dicodingacademy/163-02-spreading-operator?lite=truerest parameter:https://repl.it/@dicodingacademy/163-02-rest-parameter?lite=truemasih mengenai menarik parameter arrays mudah, yakni spreading parameter.spreading operatorspreading three consecutive dots (...). namanyaÂ âspreadâ, membentangkan tepatnyaÂ iterable objectÂ menjadi elements. 'soup'];Â console.log(favorites);Â /* 'seafood', 'soup' ]*/pada hasil dicetak (ditunjukkan ]) mencetak nilaiÂ favoritesÂ itu sendiri. menggunakanÂ spread operatorÂ kita nilai-nilai tersebut.const 'soup'];Â console.log(...favorites);Â /* output:seafood salad nugget soup*/terlihat perbedaanya, kan? spread meleburkan elemen panjang nilaiÂ array-nya ini:console.log(...favorites);sama ini:console.log(favorites[0], favorites[1], favorites[2], favorites[3]);spread cocok padaÂ variadic functions, sepertiÂ console.log()Â atauÂ math.max()./* math.max() -&gt; mencari terbesar */constÂ numbers [12,Â 32,Â 90,Â 12,Â 32];Â // menuliskan// console.log(math.max(numbers[0], numbers[1], numbers[2], numbers[3]);Â console.log(math.max(...numbers));/* output:90*/spread operatorÂ dapat menggabungkan buah baru. hasilnya 'soup'];const others ['cake', 'pie', 'donut'];Â const allfavorites [favorites, others];Â console.log(allfavorites);Â /* output:[[\"seafood\", \"salad\", \"nugget\", \"soup\"], [\"cake\", \"pie\", \"donut\"]]*/sayang sekali, tergabung. alih-alih nilainya, variabelÂ allfavoriteÂ menjadi operator?const [...favorites, ...others];Â console.log(allfavorites);Â /* output:[\"seafood\", \"soup\", \"cake\", \"donut\"]*/yups, tergabung.Â rest parametersebelumnya tahu bahwaÂ variadic functionÂ dapat menerima parameter, apakah caranya parameter? jikaÂ spread operatorÂ adalah pelebur berbeda, kebalikan penasaran?rest menggunakanÂ three dotsÂ (...). tentu teknik bermanfaat sebuahÂ variadic function.sebagai penggunaanya, buat functionÂ yang menjumlahkan argument diberikan.function sum(...numbers) result 0; (let number of numbers) number; result;}Â console.log(sum(1, 2, 3, 4, 5));Â /* output:15*/rest padaÂ array destructuring, mengelompokkan terdestruksi bentuk lain. bingung? refrigerator ['samsung', 50, 'milk', 'cheese', 'egg', 'butter'];const [manufacture, weight, door, ...items] refrigerator;Â console.log(manufacture);console.log(weight);console.log(door);console.log(items);Â /* output:samsung502[\"milk\", \"cheese\", \"egg\", \"butter\"]*/pada arrayÂ refrigeratorÂ dimasukkan individual destructuring. variabelÂ manufacture,Â weight,Â doorÂ diberikan index tiga pertama arrayÂ refrigerator. sedangkan, variabelÂ itemsÂ di sisa array.functionpotongan ini:arrow function:https://repl.it/@dicodingacademy/163-02-arrow-function?lite=truedefault parameters:Â https://repl.it/@dicodingacademy/163-02-default-parameter?lite=truefungsi bagian penting pemrograman. signifikan penulisannya. monoton mengembangkan website/aplikasi.pada memanfaatkanÂ arrow function, class hadirnya keywordÂ class, menetapkan nilaiÂ defaultÂ pada fungsi, sebagainya.penasaran perubahannya? ayo arrow function.function parameterpada diletakan panah (=&gt;) fungsi.Â // fungsiconst sayname =&gt; console.log(`nama saya ${name}`);namun berlaku bukan?Â pada ini:Â const sayhello (name, greet) console.log(`${greet}, ${name}!`);Â sayhello('dimas',Â 'selamat pagi');Â /* output:selamat pagi, dimas!*/namun biarkan saja kosong.const console.log('selamat pagi semuanya!');Â sayhello();Â /* semuanya!*/atau biasanya garis bawah (_) penulisannya simpel.block body functionfungsi merupakanÂ mini programÂ sehingga ketahui logika-logika terdiri banyakÂ expressionÂ ataupunÂ statement.Â pada ringkas. dalamnya? function? jawabannya bisa!sama regular benar-benar ({ menampungÂ body functionÂ di dituliskan. opsional saja.jika butuh language (language.touppercase() ===Â 'indonesia') returnÂ 'selamat pagi!';Â  returnÂ 'good morning!';Â  }}Â console.log(sayhello('indonesia'));Â /* pagi!*/selain juga, keywordÂ returnÂ agar mengembalikan nilai.default parametersfitur parameters, menghasilkanÂ undefinedÂ walaupun dipanggil. function.berikut parameter:regular functionarrow functionfunction sayhello(name 'stranger', greet 'hello') console.log(`${greet} ${name}!`);}Â sayhello('dimas', 'hai');sayhello();Â /* output:hai dimas!hello stranger!*/arrow functionconst (name ${name}!`);Â sayhello('dimas', stranger!*/pada (=) parameterÂ nameÂ dengan defaultÂ âstrangerâÂ dan defaultÂ âhelloâ. memanggil fungsiÂ sayhello()Â tanpa menghasilkanÂ undefined.keyword this functionperbedaan karakteristik selanjutnya keywordÂ this. penjelasan dariÂ thisÂ sendiri menyusul class. menggambarkan ketikaÂ thisÂ digunakan function.jika dipanggil menggunakanÂ keywordÂ new, contoh:function people(name, age, hobby) this.name name; this.age age; this.hobby hobby;}Â const programmer people('john', ['coding', 'read book', 'ping-pong']);Â console.log(programmer.name);console.log(programmer.age);console.log(programmer.hobby);Â /* output:john18['coding', 'ping-pong']*/objek keywordÂ new, halnya }.const hobby: 'ping-pong'],};Â console.log(programmer.name);console.log(programmer.age);console.log(programmer.hobby);Â /* 'ping-pong']*/pada keywordÂ thisÂ mengembalikan objeknya sendiri.Â thisÂ dapat objeknya. keywordÂ thisÂ bernilaiÂ global objectÂ (window browser).sedangkan, gaya nilaiÂ this, artinya function. menggunakanÂ thisÂ pada nilaiÂ thisÂ tersebut berada.perhatikan berikut:regular hobby;}Â // intromyself peoplepeople.prototype.intromyself // settimeout(function ?? console.log(`hello! ${this.name}, umur ${this.age}.`); console.log(`hobby ${this.hobby}`); 300);};Â const 'ping-pong']);programmer.intromyself();Â /* output:hello! undefined, undefined.hobby undefined*/fungsi dalamÂ settimeout()Â dideklarasikan keywordÂ new. keywordÂ newÂ yang dicoret (tidak digunakan) ini.Â // ....Â // settimeout(new ${this.age}.`);Â  ${this.hobby}`);Â  300);};Â // ....jika menyertakan keywordÂ newÂ pada valueÂ thisÂ akan bernilaiÂ global objectÂ (window). output dariÂ this.name,Â this.age, danÂ this.hobbyÂ menghasilkan nilaiÂ undefined.berbeda dalamÂ settimeout(), nilaiÂ thisÂ memiliki obyek konteksnya (people). ini.apa javascriptkebanyakan memanfaatkan paradigma oop. konsep ini. oop sepenuhnya.seperti ketahui, blueprint. berbicara blueprint, membuatnya adalahÂ prototype. sejak awal, javascript.walaupun menggantikan prototype terlebih sintaknya. kebingungan khususnya dasarnya bahasaÂ class basisÂ (seperti java, c++, c#, swift, etc.). meskipun merasa dikembangkan 6.class es6sebelum mendekati yaitu constructor padanya. konsepÂ prototype.function car(manufacture, color) this.manufacture manufacture; this.color color; this.enginesactive false;}Â car.prototype.startengines console.log('mobil dinyalakan...'); true;};Â car.prototype.info console.log('manufacture: ' this.manufacture); console.log('color: this.color); console.log('engines: (this.enginesactive ? 'active' : 'inactive'));};Â var johncar car('honda', 'red');johncar.startengines();johncar.info();Â /* output: mobil dinyalakan...manufacture: hondacolor: redengines: active*/pada atas,Â carÂ merupakanÂ constructor instanceÂ carÂ baru kodeÂ new car()Â dieksekusi. melaluiÂ car.prototype, methodÂ startengines()Â danÂ carinfo()Â diwarisi setiapÂ instanceÂ car dibuat, sehinggaÂ johncarÂ (sebagai instanceÂ car) mengakses tersebut.teknik es6.catatan:mengapa instance padaÂ prototypeÂ atauÂ __proto__Â ? padaÂ constructorÂ sama properti?Â alasannya padaÂ constructorÂ maka ketikaÂ instanceÂ dibuat. pendekatan banyak, memakan memori banyak.sedangkan prototype, kali. diwarisi kepada setiapÂ instanceÂ yang dibuat.es6 classdengan pembuatan mirip keywordÂ classÂ itu diikuti class-nya.Â class car constructor(manufacture, false; car.prototype.startengine startengines() true; car.prototype.info info() console.log(`manufacture: ${this.manufacture}`); console.log(`color: ${this.color}`); console.log(`engines: ${this.enginesactive 'inactive'}`); }}Â const active*/jika terbiasa pasti segi sintaksis keduanya perilaku sama. sebuahÂ syntactic sugarÂ dari konsepÂ prototypeÂ yang ada.mari lanjut.catatan:ketika sebuahÂ constructor functionÂ ataupunÂ class. secaraÂ code conventionÂ (aturan penulisan), pascalcase penamaannya. contohnyaÂ carÂ daripadaÂ car,Â sportcarÂ daripadaÂ sportcarÂ atauÂ sportcar.instancesetelah tersebut? sebelumnya, ituÂ instance? telah ditentukan olehÂ blueprint-nya (class), singkatnya realisasi sebuahÂ blueprint.sama sepertiÂ constructor membuatÂ instanceÂ dari keywordÂ new.class 'red');pembuatan dibandingkan pembuatanÂ instanceÂ wajib menuliskannya, terjadi ini:class 'red');Â /* cannot be invoked without 'new'*/kita sama, tentunya (properti method) propertinya unik 'red');const adamcar car('tesla', 'black');Â console.log(johncar.manufacture);console.log(adamcar.manufacture);Â /* output:hondatesla*/variabelÂ johncarÂ danÂ adamcarÂ merupakan dariÂ car. propertiÂ manufacture,Â color, danÂ enginesactive. dibuat.constructordeklarasi sifat menggunakanÂ function constructorÂ (seperti sebelumnya). constructorÂ dalam propertinya, memisahkan constructornya ditempatkan spesial dinamakanÂ constructor.Â class }}constructorÂ biasanya awal dikirimkan constructor. memerlukan kondisi diinisialisasi.kita penggunaanÂ thisÂ pada konteks keywordÂ thisÂ merujuk Â instanceÂ dari sehinggaÂ thisÂ dapat padaÂ instance.inheritancedalam gambaran dunia nyata, punya kemiripan tertentu. motor kendaraan. kendaraan darat motor. membedakan jumlah roda kapasitas penumpang ditampung.sama oop, disitulah konsepÂ inheritanceÂ atau pewarisan diterapkan. mencegah perulangan memahaminya lihatlah bagan berikut:pada classÂ car,Â motorcycle,Â plane, danÂ helicopterÂ memiliki sepertiÂ licenseplate,Â manufacture, danÂ engineactive. sepertiÂ startengines(),Â info(), danÂ parking().jika diagram classÂ carÂ di constructor(licenseplate, manufacture, wheels) this.licenseplate licenseplate; this.wheels wheels; this.engineactive console.log(`mesin ${this.licenseplate} dinyalakan!`); console.log(`nomor kendaraan: ${this.licenseplate}`); console.log(`mesin: ${this.engineactive droveoff() console.log(`kendaraan melaju!`); opendoor() console.log(`membuka pintu!`); parking() parkir!`); }}tidak sepertiÂ motorcycle,Â plane, danÂ helicopterÂ maka menuliskanÂ propertyÂ danÂ methodÂ yang berulang.Â dengan teknikÂ inheritance, nantinya diturunkan sifatnya lain:ketika vehicle melakukanÂ extendsÂ pada mewarisi sifatnya. pewarisan, super parent child class.pada mewariskan keywordÂ extendsÂ seperti berikut:class childclass extends parentclass {}sebagai contoh, classÂ vehicleÂ yang class.class manufacture) }}kemudian, classÂ carÂ sebagai dariÂ vehicle.class super(licenseplate, manufacture); }}dengan dalamnya, classÂ carÂ juga classÂ vehicle.class 'active': }}Â class car('h121s', 'honda', 4);car.startengines();Â /* output:mesin h121s dinyalakan!*/oiya padaÂ constructorÂ classÂ car, penggunaanÂ super(), maksudnya? keywordÂ superÂ digunakan induk padaÂ child jadiÂ super(licenseplate, manufacture)Â di mengaksesÂ constructorÂ dariÂ parent classÂ dan mengirimkanÂ licenseplate, danÂ manufactureÂ sebagai olehnya (instance)Â carÂ berhasil dibuat.penggunaan menjalankanÂ method overridingÂ pada parent. melakukanÂ method methodÂ info()Â dengan informasi mobil, /* overriding info */ super.info(); console.log(`jumlah roda: ${this.wheels}`); 4);johncar.info();Â /* output:nomor h121smanufacture: hondamesin: inactivejumlah 4*/dalam kelas, membatasinya. maksudnya, b, lalu b selanjutnya. nenek orang tua kita.Â sehingga dilihat dikelompokkan ini:Â static methodseluruh namanya perawatan iya, methodÂ repairÂ untuk memperbaiki analogi mengalami kerusakan diperbaiki bengkel (factory), berperan factory, sebutlah tersebutÂ vehiclefactory. kelasÂ vehiclefactoryÂ terdapat methodÂ repair()Â yang parameternya.Â class */}Â /* car, motorcycle, dsb. */Â class vehiclefactory repair(vehicles) vehicles.foreach(vehicle ${vehicle.licenseplate} perawatan`) }}untuk classnya dahulu. memanggilÂ repair(), classÂ vehiclefactory.const 4);const tommotor motorcycle('gf121j', 'yamaha', 2);const dimascar car('ta1408k', 'tesla', 4);Â /* repair */const vehiclefactory();vehiclefactory.repair([johncar, tommotor, dimascar]);Â /* output:kendaraan perawatankendaraan gf121j ta1408k perawatan*/kode efektif. mengapa? membuatÂ instanceÂ untuk sekedar class-nya membuatÂ instanceÂ adalah terbentuk blueprint tidak? sebuahÂ static method. static sendiri.pada method-nya:class */}Â /*kode }}kemudian methodnya panggil classÂ vehiclefactoryÂ kemudianÂ repair().const pemanggilan */vehiclefactory.repair([johncar, perawatan*/latihan: classselamat! biasa. finder.kita menyerupai menggunakanÂ constructor berasal tergolong âribetâ melakukanÂ inheritanceÂ yang unggul class.nah, finder, menemukan Â function adalahÂ datasourceÂ yang berkasÂ data-source.js.tugas constructorÂ datasourceÂ dengan class.good luck!settimeoutfungsiÂ settimeout()Â merupakan dijalankan asynchronous. parameter. asynchronous, nilaiÂ numberÂ dalamÂ milisecondÂ sebagai tunggu dijalankan. penggunaannya ini:console.log('selamat datang!');Â settimeout(() console.log('terimakasih mampir, datang kembali!')}, 3000);Â console.log('ada dibantu?');jika mengenal program synchronous, membayangkan berikut.mencetak selamat datang!menunggu detikmencetak terima kasih kembali!mencetak dibantu?namun nyatanyaÂ settimeout()Â tidak menghentikan eksekusi berikutnya. urutannya datang!mencetak dibantu?menunggu terimakasih kembali!jika dijalankan, menampilkan berikut:fungsi onfulfilled onrejecteduntuk menangani olehÂ resolve()Â ketika promise onfulfilled, methodÂ .then()Â pada buat. methodÂ .then()Â kita berikan sebagaiÂ handle callback. executorfunction (resolve, reject) iscoffeemakerready (iscoffeemakerready) resolve('kopi dibuat'); reject('mesin kopi digunakan!'); }};Â const handlersuccess resolvedvalue console.log(resolvedvalue);}Â const makecoffee promise(executorfunction);makecoffee.then(handlersuccess);Â /* output:kopi dibuat*/mari bedah atas:makecoffeeÂ merupakan menghasilkanÂ resolve()Â dengan âkopi dibuatâ.lalu fungsiÂ handlersuccess()Â yang parameternya.kemudian methodÂ .then()Â dariÂ makecoffeeÂ dan memberikanÂ handlersuccessÂ sebagai parameternya.ketikaÂ makecoffeeÂ terpenuhi (fulfilled), makaÂ handlersuccess()Â akan terpanggil dibawa olehÂ resolve(). âkopi dibuatâ.namun kondisiÂ rejected? olehÂ reject()?kita keduaÂ handle callbackÂ baikÂ onfulfilledÂ atauÂ onrejectedÂ pada methodÂ .then(), handle callback untukÂ onfulfilledÂ disimpan ini:makecoffee.then(handlersuccess, handlerrejected);dengan kondisiÂ rejected.const coffee console.log(coffee);};Â const handlerrejected rejectionreason console.log(rejectionreason)};Â const promise(executorfunction);makecoffee.then(handlersuccess, handlerrejected);Â /* digunakan!*/promise allmateri situasi terdapatÂ asynchronous processÂ yang saling melaksanakan tugasnya. sekaligus? menggunakanÂ promise.all().kita sering pergi cafe menikmati secangkir bersama teman kuliah rekan kerja. memesan kopi, bersamaan. pesan pelayan menghidangkannya berbarengan pesan. teknikÂ promise.all().methodÂ promise.all()Â dapat (dalam array) parameternya. tetapkan array.contohnya arabicaorder promise(resolve settimeout(() arabika selesai!'); 4000); });};Â const robustaorder robusta 2000); libericaorder liberica 3000); promises [arabicaorder(), robustaorder(), libericaorder()];Â promise.all(promises) .then(resolvedvalue console.log(resolvedvalue); });Â /* output:['kopi selesai!', 'kopi selesai!']*/ketika dieksekusi, menunggu detik ditampilkan. menunjukan bahwaÂ promise.all()Â akan selesai dijalankan.urutan dihasilkan tentukan parameternyaconst });nilai pembuatannya lama.Â menangani onrejected async/awaitperlu jadi await (onfulfilled). gagal (onrejected)? lagi prinsipÂ synchronous code. tolakan menggunakanÂ try...catch.ketika async/await, biasakan menggunakanÂ tryÂ saat resolved berikut:async makecoffee() Â tryÂ {Â  Â constÂ coffee =Â awaitÂ getcoffee();Â  Â console.log(coffee);Â  blockÂ catchÂ untuk (onrejected).async try getcoffee(); console.log(coffee); catch (rejectedreason) console.log(rejectedreason); }}Â makecoffee();Â /* output:biji habis!*/latihan: promiseselamat! finder.pada datasource, pengguna.Â class constructor(onsuccess, onfailed) this.onsuccess onsuccess; this.onfailed onfailed; searchclub(keyword) filteredclubs clubs.filter(club club.name.touppercase().includes(keyword.touppercase()));Â  (filteredclubs.length) this.onsuccess(filteredclubs); this.onfailed(`${keyword} found`); }}karena memanfaatkannya. callbackÂ onsuccessÂ danÂ onfailedÂ lagi. penggunaanÂ resolveÂ danÂ rejectÂ pada promise.tugas penerapanÂ callback functionÂ dengan promise.Â good ya!solusi: promiseapakah promise? bersama-sama.langkah classÂ datasource. hapus memuat }}sehingga classÂ datasourceÂ akan beserta class-nya, methodÂ searchclubÂ dapat dariÂ datasourceÂ tanpa membuatÂ instance.Â masih ingat melakukannya? instance, keywordÂ staticÂ sebelum method-nya.class }}setelah methodÂ searchclubÂ mengembalikan promise((resolve, club.name.touppercase().includes(keyword.touppercase())); }}jangan lupa callbackÂ onsuccess()Â danÂ onfailed(), menggunakanÂ resolve()Â danÂ reject(). resolve(filteredclubs); reject(`${keyword} }}namun sampai sini. methodÂ searchclubÂ menjadiÂ staticÂ dan mengubahÂ callbackÂ menjadi penyesuaian digunakan.pada fungsiÂ onbuttonsearchclickedÂ ini:const constÂ datasource =Â newÂ datasource(renderresult, fallbackresult);Â  datasource.searchclub(searchelement.value);};menjadi datasource.searchclub(searchelement.value) .then(renderresult) .catch(fallbackresult);};atau suka fungsiÂ onbuttonsearchclickedÂ berjalan asynchronous async renderresult(result); fallbackresult(message); }};promise diterapkan! berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/107-club-finder-promise-solutionekspor node.jspada pengenalan disebutkan mengekspor nilai. melakukannya?sebenarnya diekspor tetaplah satu, }. contohnya, tambahkan variabelÂ iscoffeemakerreadyÂ pada berkasÂ state.js.const coffeestock arabica:Â 100,Â  robusta:Â 150,Â  liberica:Â 200,};Â const true;lantas mengeksport (coffeestock,Â iscoffeemakerready) ini:module.exports coffeestock;module.exports iscoffeemakerready;namun literal {coffeestock, iscoffeemakerready};sehingga nilaiÂ moduleÂ pada console, exports objekÂ coffeestockÂ dan variabelÂ iscoffeemakerready.module id:Â '.',Â  exports: coffeestock: arabica:Â 100, robusta:Â 150, liberica:Â 200Â },Â  iscoffeemakerready:Â trueÂ  },Â  parent:Â null,Â  filename:Â '/home/runner/163-02-multiple-export-nodejs/state.js',Â  loaded:Â false,Â  children: [],Â  paths: [Â  '/home/runner/163-02-multiple-export-nodejs/node_modules',Â  '/home/runner/node_modules',Â  '/home/node_modules', '/node_modules' ]}lalu impor materiÂ destructuring object? berkasÂ index.js, ini:index.jsstate.jsconst iscoffeemakerready} require('./state.js');Â console.log(coffeestock);console.log(iscoffeemakerready);Â /* arabica: 100, robusta: 150, liberica: 200 }true*/state.jsconst liberica:Â 200,};Â constÂ iscoffeemakerready =Â true;Â module.exports iscoffeemakerready};namun ingat, menggunakanÂ destructuring object, tidak, menghasilkanÂ undefined.es6 modulejika environment ekspor module import export es6.sebelum adanya tagÂ &lt;script&gt;Â pada semakin digunakan, tagÂ &lt;script&gt;Â dituliskan. import, tagÂ &lt;script&gt;Â yang utama (biasanya diberi namaÂ main.js,Â app.js, atauÂ index.js).pada fiturÂ es6 moduleÂ standarnya diaktifkan mengaktifkan attributeÂ type=âmoduleâÂ pada gunakan.&lt;script src=\"app.js\" type=\"module\"&gt;&lt;/script&gt;tidak setidaknya mendukung modules. detailnya:google chrome: 61+mozilla firefox: 60+safari: 10.1+microsoft edge: 16+solusi: moduleapakah finder? berkasÂ index.html, kecualiÂ app.js.&lt;script src=\"src/script/data/clubs.js\"&gt;&lt;/script&gt;&lt;script src=\"src/script/data/data-source.js\"&gt;&lt;/script&gt;&lt;script src=\"src/script/view/main.js\"&gt;&lt;/script&gt;&lt;script src=\"app.js\"&gt;&lt;/script&gt;menjadi:&lt;script src=\"app.js\"&gt;&lt;/script&gt;lalu attributeÂ typeÂ dengan âmoduleâ tagÂ &lt;script&gt;.&lt;script type=\"module\"&gt;&lt;/script&gt;kemudian javascript-nya. berkasÂ clubs.js. padaÂ clubs.jsÂ kita gunakanlahÂ export defaultÂ untuk clubs.tambahkan berkasÂ clubs.js:export clubs;selanjutnya classÂ datasourceÂ yang kodenya:export datasource;nilai terakhir fungsiÂ mainÂ yang kodenya.export main;setelah digunakan. javascript.yang berkasÂ data-source.jsÂ membutuhkan clubs moduleÂ clubs.js. mengimpor kodeÂ data-source.js.import from './clubs.js';yang classÂ datasourceÂ digunakan berkasÂ main.jsÂ sehingga mengimporÂ datasourceÂ pada moduleÂ data-source.js. berkasÂ main.js:import '../data/data-source.js';dan berkasÂ app.jsÂ kita nilaiÂ mainÂ dari moduleÂ main.js. berkasÂ app.js:import './src/script/view/main.js';setelah module, kemungkinan eror:access script at 'file:///....../clubfinder/app.js' origin 'null' blocked by cors policy: cross requests are only supported protocol schemes: http, data, chrome, chrome-extension, https.error menggunakanÂ import, tunduk terhadap peraturan cors. nanti detail request. singkatnya, membuka berkasÂ index.htmlÂ secara langsung. local http server (dijalankan localhost).jika menginstalnya, packageÂ http-serverÂ yang berikut:Â https://www.npmjs.com/package/http-server. menggunakannya, memasang extensions code digunakan.visual codeÂ : vscode âlive serverâ localhost. panduan berikut:Â https://code.visualstudio.com/docs/editor/extension-galleryatom editorÂ : atom âatom-live-serverâ berikut:Â https://flight-manual.atom.io/using-atom/sections/atom-packages/bracketÂ : bracket. localhost live preview tersebut.langkah berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/108-club-finder-module-solutionrangkuman 6untuk memperdalam mengingat materi-materi penulis rangkuman mempermudah review dipelajari.sejarah javascriptjavascript 1995. bukanlah livescript.javascript lisensi.terkadang (ecma).terdapat javascript:2000 2010: popular pengembangan. dihentikan.2009: diriliskan hal-hal non-kontroversial2015: (es6) hadir besar, ke-empat.2016 pembaharuan-pembaharuan kecil minor.deklarasi variablevariabel wadah suatu informasi.cara variabelnyavar global. menyebabkan terangkatnya dinamakan hoistingconst disarankan re-initialization.let memungkinkan re-initialization (inisialisasi ulang)template literalstemplate kompleks.penerapan single quote double quote, simbol backtick (`), diawal diakhir.dalam literal, ditampilkan nilainya.template membaca line space escape character. contoh: â\\nâ.destructuring properti-properti kecil.destructuring object:dilakukan value obyek. nama-nama harusnya obyek.destructuring array:dilakukan ], array.nilai diterima item-item item, menyesuaikan itemnya mengisi (dikosongkan).destructuring re-assignment destructuring.spreading parameterspreading pembentangan array-nya.rest menyatukan operator.penerapan tiitk (...) iterable object-nya. ...arrays;.fitur satu.rest sisanya baru.arrow sederhana.penulisan panah, kanan (&gt;). diletakkan panah. apapun, mengisinya underscore biasa.selain (expression) sederhana.arrow this. bernilai atasnya, dimana beradadefault parameterdefault terhindar undefined.classclass obyek.blueprint dianalogikan kemampuan.sebelum berorientasi obyek.deklarasi statement. berisikan method-method dibutuhkan.biasanya supaya dimanipulasi getter/setter properti. umumnya. getter cara:Â mycar.brand, mengatur memanipulasi setter cara:Â mycar.brand âtoyotaâ.untuk classnya. contoh:Â new myclass();.standarnya pascalcase.inheritanceinheritance kemampuan pewarisnya (child class).inheritance pembuka classnya.static methodstatic instansiasi pemanggilannya methodnya.pembuatan sendiri.promisepromise asyncronous alternatif chaining then().Â dalam kondisi, pending (sedang diproses), fulfilled (terpenuhi), rejected (gagal dipenuhi).untuk promise. memasukkan resolver executor otomatis dipanggil.resolver opsional, resolve() reject() resolve berhasil. reject terpenuhi. terpanggil, berubah filfilled. rejected.untuk fulfilled, diteruskan then. catch.promise berantaipromise berantai. hell. melakukannya, then().promise allpromise all sekaligus. mencapainya, all() berisi promise.hasil dikeluarkan bebarengan. semua bebarengan.async/awaitasync/await mengatasi syncronous.untuk kamu function.teknik 2017 (es8)untuk penanganan try/catch. catch.untuk berantai mengurutkannya depannya.modulemodule membagi bagian. awalnya pembagian penggabungan tag disusun. peletakkannyapun rentan.javascript dsb.dalam ekspor. nilai.dalam dibebaskan. relative path dituju. named diatasi object.javascript reusable.javascript atribut element type moduleweb componentsapa componentweb component ditetapkan world wide consortium (w3c). komponen ui websitenya modular.dengan pesatnya perkembangan website, modern website. mampu ulang. kebanyakan ui.Â namun kelebihan framework?standardÂ : w3c yangÂ reusable.compatibilityÂ : standard angular, react, vue.simpleÂ : konfigurasi khusus layaknya js/css/html murni.web bersifatÂ reusable. sekalipun. pasal? js/html/css murni. api component, yakni:custom elements: (custom element). kebutuhan.shadow dom: terenkapsulasi gangguan luar. custom element, terpengaruh styling elemen-nya.custom elementhtml kemudahan untungnya sepakat menggunakannya. kelasÂ belajar webÂ kita website.Â ada tags manfaatkan html5 hampir 100 gunakan? banyaknya tersedia, arti (semantic meaning).untuk arti, tepat html5, pembentuk layout tagÂ &lt;div&gt;, header, main, footer, article, aside (konten samping).setelah dikenalkan html). elemen-elemen peran tersebut.elementÂ &lt;div&gt;Â memang mencakup tersedia. menyiasati tagÂ &lt;div&gt;Â dengan atributÂ idÂ ataupunÂ classÂ untuk fungsinya. atributnya, sendirilah mengetahuinya.namun sekarang, elemenÂ &lt;div&gt;Â pada diminimalisir lagi. dibaca mudah.(kiri) tagÂ &lt;div&gt;. (kanan) element.dengan rapi demikian, dom kebutuhan. gambar atas.atribut elementpotongan ini:Â https://codesandbox.io/s/163-6980-atribut-dan-method-pada-custom-element-rftd0eselain siklus hidup, htmlelement dom. sepertiÂ innerhtml,Â innertext,Â appendchild(),Â remove(), sebagainya. element. imagefigure connectedcallback() this.src this.getattribute('src') || null; this.alt this.getattribute('alt') this.caption this.getattribute('caption') null;Â  this.innerhtml ` &lt;figure&gt; src=\"${this.src}\" alt=\"${this.alt}\"&gt; &lt;figcaption&gt;${this.caption}&lt;/figcaption&gt; &lt;/figure&gt; `; }}Â customelements.define('image-figure', imagefigure);dari elementÂ &lt;image-figure&gt;Â tampak dom, atributÂ src,Â alt, danÂ caption. elemenÂ &lt;figure&gt;Â dengan memanfaatkanÂ innerhtml.untuk bedanya elemennya, javascript.tag-htmljavascript&lt;image-figure src=\"https://i.imgur.com/ijq78xh.jpg\" alt=\"dicoding logo\" caption=\"huruf g logo dicoding\"&gt;&lt;/image-figure&gt;javascriptconst imagefigureelement document.createelement('image-figure');Â imagefigureelement.setattribute('src', 'https://i.imgur.com/ijq78xh.jpg');imagefigureelement.setattribute('alt', 'dicoding logo');imagefigureelement.setattribute('caption', 'huruf dicoding');Â document.body.appendchild(imagefigureelement);jika hasilnya, ini:dengan elemenÂ &lt;figure&gt;Â tanpa elementÂ &lt;img&gt;Â danÂ &lt;figcaption&gt;Â di dibutuhkan. kerennya elemen? baru, ada.Â mengamati atributpotongan ini:Â https://codesandbox.io/s/163-6987-mengamati-nilai-atribut-zw71q6ketika mengganti atributnya diperbaharui. standar, element? sama? bersama.pada elementÂ &lt;image-figure&gt;Â yang elementÂ &lt;figure&gt;Â dengan ini:index.htmlimage-figure.js&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; name=\"viewport\" content=\"width=device-width\"&gt; &lt;title&gt;attribute observe&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;image-figure dicoding\"&gt; &lt;/image-figure&gt; &lt;script src=\"image-figure.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;lalu ini:lalu, atributÂ captionÂ dengan browser.const document.queryselector('image-figure');element.setattribute('caption', 'lorem ipsum dolor sit amet');kita gif caption, berubah. kok mengimplementasi kelasnya (imagefigure) mengobservasi fungsiÂ attributechangedcallback, fungsiÂ static get observedattributes.kedua terhubung. fungsiÂ attributechangedcallbackÂ akan diamati fungsiÂ observedattributesÂ diubah fungsiÂ attributechangedcallbackÂ inilah perubahan. (tiga) dimanfaatkan yaitu:nameÂ : berubaholdvalueÂ : diubahnewvalueÂ : atribut.urutan argumen sangatlah penting, tertukar.Â sebenarnya argumennya gunakanÂ name,Â oldvalue,Â newvalueÂ guna penggunaannya.berikut tersebut:class this.render(); render() attributechangedcallback(name, oldvalue, newvalue) this[name] newvalue; observedattributes() ['caption']; imagefigure);mari kodenya persatu. fungsiÂ attributechangedcallback(), tuliskan propertiÂ this[name]Â dengan ditetapkan.Â this[name]Â ini dinamis diubah. misalkan atributÂ âcaptionâÂ maka nilaiÂ this[âcaptionâ], atributÂ âaltâÂ maka nilaiÂ this[âaltâ].setelah fungsiÂ render(). rendering terpisah diÂ connectedcallback). tujuannya data.lalu jugaÂ static observedattributes(). fungsinya? fungsiÂ getterÂ statis âseseorangâ mengamati ditentukan. perubahan, memanggilÂ attributechangedcallbackÂ dengan memberitahu berubah, serta ditetapkan.Â observedattributesÂ tidak kembaliannya diamati.return ['caption'];nilai kembalian dariÂ observedattributesÂ merupakan atribut, literals.return ['caption', 'src', 'alt'];setelah tadi bereaksi atribut.latihan: finderdi latihan finder. bagus baiknya lagi.jika seksama, berpotensi dijadikan yaitu:app barÂ : Â di identitas web.search elemenÂ &lt;input&gt;Â danÂ &lt;button&gt;Â dan input pengguna.club listÂ : pencarian, menampilkannya list.club itemÂ : list. gambar, nama, deskripsi club.tugas modular reusable poin-poin atas.jika stuck melanjutkan solusi, tanyakan hadapi ya.good luck!Â solusi: search-bar componentpembuatan elemenÂ &lt;search-bar&gt;Â lebih rumit sebelumnya. search bar elementÂ &lt;input&gt;Â danÂ &lt;button&gt;. kombinasi club. sebisa elementÂ &lt;search-bar&gt;Â sehingga kala tersebut.mari namaÂ search-bar.js. classÂ searchbarÂ dengan sifatÂ htmlelement.class searchbar {}kemudian methodÂ connectedcallback()Â dan fungsiÂ render().class {}Â Â Â  {}}lalu, fungsiÂ render()Â di dalamÂ connectedcallback().class Â this.render();Â  }Â Â Â  {}}di fungsiÂ render()Â kita ambil berkasÂ index.html. berikut.&lt;div id=\"search-container\" class=\"search-container\"&gt;Â  &lt;inputÂ placeholder=\"search football club\"Â id=\"searchelement\"Â type=\"search\"&gt;Â  &lt;buttonÂ id=\"searchbuttonelement\"Â type=\"submit\"&gt;search&lt;/button&gt;&lt;/div&gt;agar lakukanÂ copyÂ seluruh danÂ pasteÂ untuk nilaiÂ this.innerhtmlÂ di class=\"search-container\"&gt; &lt;input placeholder=\"search club\" id=\"searchelement\" type=\"search\"&gt; &lt;button id=\"searchbuttonelement\" type=\"submit\"&gt;search&lt;/button&gt; &lt;/div&gt; }}dikarenakan elemenÂ &lt;button&gt;Â yang event ditekan, menyediakanÂ setter. gunanya classÂ searchbar.class set clickevent(event) this._clickevent event; }}lalu, terapkanÂ this._clickeventÂ sebagai handler elementÂ &lt;button&gt;Â dengan fungsiÂ render():this.queryselector('#searchbuttonelement').addeventlistener('click', this._clickevent);sehingga render ini:render() `;Â  this.queryselector('#searchbuttonelement').addeventlistener('click', this._clickevent);}dengan button (event click) melaluiÂ setter accessorÂ diÂ searchbar. berkasÂ main.js.pada memanfaatkanÂ valueÂ dari elementÂ &lt;input&gt;Â untuk kata kunci nilaiÂ valueÂ dari elemenÂ &lt;input&gt;Â yang bar, elemenÂ &lt;input&gt;Â tersebut.get value() returnÂ this.queryselector('#searchelement').value;}sehingga keseluruhan berkasÂ search-bar.jsÂ akan Â connectedcallback() Â this.render(); Â }Â Â  Â set Â this._clickevent Â }Â  Â get {Â Â  Â returnÂ this.queryselector('#searchelement').value; Â render() Â this.innerhtml =Â `Â Â  Â &lt;div class=\"search-container\"&gt;Â Â  Â &lt;input type=\"search\"&gt;Â  Â &lt;button type=\"submit\"&gt;search&lt;/button&gt;Â  Â &lt;/div&gt;Â  Â `;Â  Â this.queryselector('#searchbuttonelement').addeventlistener('click',Â this._clickevent);Â Â }}lalu berkasnya, definisikan dom.class =Â ` type=\"search\"&gt;Â Â  type=\"submit\"&gt;search&lt;/button&gt;Â Â  Â &lt;/div&gt;Â Â  Â `;Â Â Â  Â this.queryselector('#searchbuttonelement').addeventlistener('click',Â this._clickevent);Â Â }}Â customelements.define('search-bar', searchbar);yeay, selesai. menggunakannya! membentuk tagÂ &lt;search-bar&gt;. berkasÂ index.htmlÂ kemudian berikut:&lt;div class=\"search-container\"&gt;Â Â &lt;inputÂ placeholder=\"search club\"Â id=\"searchelement\"Â type=\"search\"&gt;Â Â &lt;buttonÂ id=\"searchbuttonelement\"Â type=\"submit\"&gt;search&lt;/button&gt;&lt;/div&gt;menjadi ini:&lt;search-bar&gt;&lt;/search-bar&gt;setelah berkasÂ src view main.jsÂ dan sesuaikan binding document.queryselector('#searchelement');dengan selector-nya âsearch-barâ.const document.queryselector('search-bar');lalu variabelÂ buttonsearchelementÂ karena melaluiÂ searchelement. document.queryselector('#searchbuttonelement');kemudian click berikut:buttonsearchelement.addeventlistener('click', onbuttonsearchclicked);menjadi:searchelement.clickevent onbuttonsearchclicked;terakhir, berkasÂ main.jsÂ memerlukan berkasÂ search-bar.jsÂ tereksekusi, berkasÂ search-bar.jsÂ pada ini:import '../component/search-bar.js';tuliskan berkasnya '../component/search-bar.js';import '../data/data-source.js';Â const document.queryselector('search-bar'); document.queryselector('#clublist');Â  results results.foreach(club {name, fanart, description} club; art\"&gt; class=\"club-info\"&gt; &lt;h2&gt;${name}&lt;/h2&gt; &lt;p&gt;${description}&lt;/p&gt; class=\"placeholder\"&gt;${message}&lt;/h2&gt;`; searchelement.clickevent onbuttonsearchclicked;};Â export main;terakhir, proyeknya menggunakanÂ local serverÂ dan âarsenalâ. tampilan berikut:solusi: club-list club-item componentcustom adalahÂ &lt;club-list&gt;Â danÂ &lt;club-item&gt;. mengenaiÂ nested denganÂ nested element.mari awali âclub-list.jsâ âclub-item.jsâ padaÂ src component.Â membuat &lt;club-list&gt; elementlangkah elementÂ &lt;club-list&gt;Â terlebih berkasÂ club-list.js, classÂ clublistÂ dengan clublist 2 (dua) yaituÂ setterÂ clubs, danÂ render.class clubs(clubs) {}Â  {}}fungsiÂ set clubsÂ digunakan propertiÂ this._clubsÂ pada nantinya, fungsiÂ render()Â dalam elementÂ &lt;club-item&gt;.set this._clubs clubs;Â  this.render();}kemudian fungsiÂ render, fungsiÂ foreachÂ pada propertiÂ this._clubs. iterasinya (perulangannya), elementÂ &lt;club-item&gt;Â secara elemenÂ &lt;club-item&gt;Â yang terbuat menjadiÂ childÂ elementÂ dari elementÂ &lt;club-list&gt;Â ini. fungsiÂ renderÂ akan =Â '';Â  this._clubs.foreach(club constÂ clubitemelement =Â document.createelement('club-item');Â  clubitemelement.club club;Â  this.appendchild(clubitemelement);Â  });}perlu kegagalan ditemukkan. namaÂ rendererror()Â dengan eror/alasan ditampilkan.rendererror(message) {}untuk ditampilkan, copy fungsiÂ fallbackresult()Â pada main.js.clublistelement.innerhtml '';clublistelement.innerhtml class=\"placeholder\"&gt;${message}&lt;/h2&gt;`;lalu paste fungsiÂ rendererror()Â dan ubahÂ clublistelement.innerhtmlÂ menjadiÂ this.innerhtml.rendererror(message) +=Â `&lt;h2 class=\"placeholder\"&gt;${message}&lt;/h2&gt;`;}pada berkasÂ club-list.jsÂ jangan dom.customelements.define('club-list', clublist);oh ya! elemenÂ &lt;club-item&gt;Â (kita padaÂ club-item.js), berkasÂ club-item.jsÂ ke berkasÂ club-list.jsÂ ini. menambah ini.import './club-item.js';sehingga club-list.js './club-item.js';Â class clubs; rendererror(message) clubitemelement document.createelement('club-item'); this.appendchild(clubitemelement); }}Â customelements.define('club-list', clublist);pembuatan elementÂ &lt;club-list&gt;Â selesai! elemenÂ &lt;club-item&gt;.membuat &lt;club-item&gt; elementpada berkasÂ club-item.js, classÂ clubitemÂ dengan htmlelement.class clubitem deklarasikan fungsiÂ setterÂ clubÂ dan fungsiÂ render.class club(club) {}Â Â  {}}fungsi setterÂ clubÂ berfungsi nilaiÂ clubÂ ke propertiÂ this._clubÂ yang fungsiÂ renderÂ untuk pencarian. fungsiÂ setterÂ clubÂ menjadi Â this._club }Â Â  {}}lalu lakukanÂ copyÂ template fungsiÂ renderresultÂ di main.js.clubelement.innerhtml &lt;/div&gt;`;kemudian, lakukanÂ pasteÂ template propertiÂ this.innerhtmlÂ di this._club padaÂ html templateÂ menjadi src=\"${this._club.fanart}\" &lt;h2&gt;${this._club.name}&lt;/h2&gt; &lt;p&gt;${this._club.description}&lt;/p&gt; propertiÂ this._club-lah disimpan.kemudian berkasÂ club-item.jsÂ jangan }}Â customelements.define('club-item', clubitem);dengan elemenÂ &lt;club-item&gt;Â sudah digunakan.menggunakan elementsetelah dibutuhkan, menggunakannya!silakan penerapanÂ club listÂ menggunakan elemenÂ &lt;div&gt;Â berikut:&lt;div id=\"clublist\"&gt;&lt;/div&gt;menjadi:&lt;club-list&gt;&lt;/club-list&gt;selanjutnya, main.js. selector bindingÂ clublistelement. document.queryselector('#clublist');menjadi:const document.queryselector('club-list');lalu fungsiÂ renderresult. });};kita menggantinya clublistelement.clubs results;};sesuaikan fungsiÂ fallbackresult, fungsiÂ rendererror()Â padaÂ clublist, clublistelement.rendererror(message);};karena elemenÂ &lt;club-list&gt;Â pada berkasÂ club-list.jsÂ pada berkasÂ main.js.import '../component/club-list.js';dengan berkasÂ main.jsÂ akan berikut:import '../component/club-list.js';import document.queryselector('club-list');Â  results; clublistelement.rendererror(message); main;sekarang serverÂ lalu tekan tombol voila, hasilnya:ops, daftar berantakan. styling-nya juga. style clublist.css. selectorÂ #clublistÂ menjadiÂ club-listÂ dan selectorÂ .clubÂ menjadiÂ club-item.club-list margin-top: 32px; width: 100%; padding: 16px;}Â club-list &gt; .placeholder font-weight: lighter; color: rgba(0, 0, 0.5); -webkit-user-select: none; -moz-user-select: -ms-user-select: user-select: none;}Â club-item margin-bottom: 18px; box-shadow: 0 4px 8px 0.2); border-radius: 10px; overflow: hidden;}Â club-item .fan-art-club max-height: 300px; object-fit: cover; object-position: center;}Â .club-info 24px;}Â .club-info h2 lighter;}Â .club-info p hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 10; lines show */}kemudian display selectorÂ club-listÂ danÂ club-item.club-list block; /*...*/}Â /*...*/Â club-item /*...*/}Â /*...*/sehingga berkasÂ clublist.cssÂ akan ini:club-list */}sekarang server. kini semuanya baik.langkah berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/109-club-finder-custom-element-solutionpenggunaan shadow componentpotongan ini:https://codesandbox.io/s/163-7064-shadow-dom-in-web-component-0rqu94untuk enkapsulasi element,Â shadow domÂ berperan membuatÂ web componentÂ (hal olehÂ w3c). menerapkanÂ shadow domÂ pada padaÂ document tree, bila element?jawabannya mudah! materiÂ styling domindex.htmlimage-figure.js&lt;!doctype &lt;title&gt;styling dom&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"style.css\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- image-figure mempengaruhi luarnya --&gt; logo\"/&gt; &lt;figcaption&gt;huruf dicoding&lt;/figcaption&gt; src=\"image-figure.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;index.htmlimage-figure.jsclass &lt;style&gt; figure border: thin #c0c0c0 solid; flex; flex-flow: column; 5px; max-width: 220px; margin: auto; img figcaption background-color: #222; #fff; font: italic smaller sans-serif; 3px; text-align: center; &lt;/style&gt; imagefigure);ketika komponenÂ &lt;figure&gt;Â yang element.kita komponenÂ imagefigureÂ atau tagÂ &lt;image-figure&gt;Â saja. yup, wajar menetapkanÂ shadow domÂ sehingga berdampak luarnya.dalam melampirkanÂ shadow biasanya, menggunakanÂ attachshadow. ini.class Â constructor() Â super();Â  Â this._shadowroot =Â this.attachshadow({mode:Â 'open'}); //.....}supaya nilaiÂ shadowrootÂ dapat fungsiÂ attachshadow()Â ke propertiÂ _shadowrootÂ melalui namaÂ _shadowrootÂ untuk memudahkan.Â lalu, penamaannya depannya? jawabannya, keywordÂ thisÂ pada (class imagefigure) bernamaÂ shadowroot. propertiÂ _shadowrootÂ asli buat, modeÂ closedÂ padaÂ shadow propertiÂ shadowrootÂ akan mengembalikanÂ null, mengaksesÂ shadow tree.setelah domÂ padaÂ constructor, apapun dariÂ domÂ kita melaluiÂ _shadowroot. langsungÂ this.innerhtml, melaluiÂ this._shadowroot.innerhtml. fungsiÂ render()Â menjadi this._shadowroot.innerhtml `;}dengan sekarangÂ stylingÂ pada sebaliknya,Â stylingÂ yang komponen.latihan: penerapanya, terganggu komponennya.tugas finder.jika mengalamiÂ stuckÂ sebelum luck!Â package managerpendahuluan package managerdalam industri module/package cepat. kompleks sinilah sebuahÂ package manager.package manager tools dependencies library. denganÂ package managerÂ juga kita. dikonsumsi publik.hampir memilikiÂ package manager-nya masing-masing. maven gradle, php composer, python pip. lalu, javascript? punya! npm satuÂ package package. npm, yarn sebagaiÂ package manager.Â keduanya, merupakanÂ package managerÂ yang baik. saja, npm. disediakan node.js.apa managernpm pengelola padaÂ npmjs.com. terpasang kita.Â walaupun dibundel paham dahulu node.jsÂ runtimeÂ ataupunÂ node applicationÂ untuk ranah development jquery, package/framework development. esensialnya skill mahir menggunakanya.berbicara berbagi menggunakannya lain, module. ditulis, 1,204,963 manfaatkan.sudah npm? pasang kita.membuat npmsetelah perintah kita? lokal, berkasÂ package.json. nanti.untuk berkasÂ package.jsonÂ sebenarnya berkasÂ package.jsonÂ sebaiknya perintahÂ npm initÂ pada terminal berkasÂ package.jsonÂ bersama-sama.pertama root beri âwebclockâ. contohkan code.kemudian terminal/command prompt menuÂ terminal terminal. perintahnpm inituntuk code, usungan os anda, lokasinya proyek.setelah pertanyaan packageÂ name,Â version,Â description. buat.nilai default. harapkan, menekan tombolÂ enter.setelah diberikan, diberitahu berkasÂ package.json.jika sesuai, tombolÂ enter. berkasÂ package.jsonÂ berhasil kita.langkah berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/201-web-clock-initial-projectmemasang package.jsonberkasÂ package.jsonÂ merupakan node application. manifest deskripsi, versi,Â author,Â remote repository, lainnya. modules kita.Â padaÂ dependencies modulesÂ kita melihatÂ modulesÂ apa aplikasi, module/library jquery terdaftar objekÂ dependenciesÂ di perintahÂ installÂ kemudian package-nya.Â mari proyekÂ webclock. jalankan terminal:npm install jqueryketika pemasangan dipasang, ini:kita padaÂ package.json. digunakan.\"dependencies\": \"jquery\":Â \"^3.4.1\"}ketika lainnya, contohÂ moment.js.npm momentmaka juga.\"dependencies\": \"jquery\":Â \"^3.4.1\",Â  \"moment\":Â \"^2.24.0\"}selain berkasÂ package.json, ânode_modulesâ memasangÂ package. pasang.sebenarnya tipe objekÂ dependencies, objekÂ devdepedencies. perbedaannya?objekÂ dependenciesÂ merupakan aplikasi. didaftarkan vue, &lt;package-name&gt; sebelumnya.sedangkan objekÂ devdependeciesÂ digunakan mendaftarkan sepertiÂ http-server, atauÂ packageÂ yang membundel sepertiÂ webpack. sebagaiÂ devdependenciesÂ kita --save-devjadi packageÂ http-serverÂ sebagaiÂ devdependencies, berikut:npm http-server --save-devmaka packageÂ http-serverÂ akan objekÂ devdependencies.\"dependencies\": \"moment\":Â \"^2.24.0\"},\"devdependencies\": \"http-server\":Â \"^0.12.1\"}langkah berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/202-webclock-installing-packagemenggunakan browseryes! padaÂ dependenciesÂ danÂ devdependencies. sejatinya dipasang diperuntukkan application application, mengimpornya moment require('moment');namun padaÂ environmentÂ node.js, imporÂ node packageÂ pada tambahan webpack mempelajarinya selanjutnya).tapi lama tagÂ &lt;script&gt;. berkasÂ index.htmlÂ dengan html-nya moment.js tagÂ &lt;script&gt;.&lt;!doctype &lt;title&gt;clock web&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Â  src=\"node_modules/moment/moment.js\"&gt;&lt;/script&gt; src=\"node_modules/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;dengan mari, namaÂ index.js. berikut.const displaytime moment.locale('id'); $('.time').text(moment().format('lts')); $('.date').text(moment().format('ll'));};Â const updatetime displaytime(); settimeout(updatetime, 1000);};Â updatetime();kemudian, elementÂ &lt;body&gt;Â berkasÂ index.html, waktu, jam tanggal. elementÂ &lt;body&gt;, berkasÂ index.jsÂ yang tadi. berkasÂ index.htmlÂ akan berikut.&lt;!doctype web&lt;/title&gt;&lt;/head&gt;&lt;body&gt; class=\"clock\"&gt; &lt;span class=\"time\"&gt;&lt;/span&gt; class=\"date\"&gt;&lt;/span&gt; src=\"node_modules/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;Â  src=\"index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;jika berikut.supaya menarik, menerapkanÂ stylingÂ dengan berkasÂ style.cssÂ dan melampirkannya padaÂ index.htmlÂ seperti ini:style.cssindex.html.clock 400px; black; 30px; white; font-family: flex-direction: column;}Â .clock .time font-size: 64px; auto;}Â .clock .date 24px; auto;}index.html&lt;!doctype web&lt;/title&gt; href=\"style.css\"&gt;&lt;/head&gt;&lt;body&gt; src=\"node_modules/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt; src=\"index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;dan beginilah clock moment.js.walaupun moment.js, tagÂ &lt;script&gt;Â melalui direktoriÂ node_modulesÂ tidaklah disarankan. manager. cdn berikut.&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"&gt;&lt;/script&gt;untuk dalam, membahasnya berikut:moment.js:Â https://momentjs.com/guides/jquery:Â https://api.jquery.com/langkah berikut:https://github.com/dicodingacademy/a163-bfwd-labs/tree/203-webclock-using-installed-packagecakupan packagedalam lokasi tetapkan. global, saja.untuk lokal. &lt;package-name&gt;Â namun menambahkanÂ -gÂ pada perintahnya.Â mari packageÂ http-server, -ghasilnya:memasang global berkasÂ package.jsonÂ proyek directory default-nya windows, adalahÂ c files nodejs node_modules. perintah.npm list -gperintah berikut:kita layer packageÂ http-server,Â sedangkan bawahnya packageÂ http-serverÂ itu khawatir bawahnya, tampilkan perintah:npm -g --depth=0hasilnya:nah, packageÂ http-serverÂ dalam start packageÂ http-serverÂ tidak padaÂ package.json.begitulah selanjutnya, berkenalan webpack.menghapus terpasangkita scripts. kita?untuk objekÂ dependenciesÂ maka menghapusnya uninstall &lt;package-name&gt;jika padaÂ devdependencies, menambahkanÂ --save-devÂ di perintahnya:npm --save-devcontoh, --save-devdengan dihapus objekÂ devdependeciesÂ di berkasÂ package.json.\"dependencies\": {}selain dariÂ package.json, segala berhubungan packageÂ http-serverÂ pada folderÂ node_modules.setelah scriptÂ startÂ lagi.perintahÂ uninstallÂ juga alias, cepat perintahnya. alias -hbundel bundler pendahuluan bundlerpenggunaan external (library) dengannya, sebabnya, library shareable. dua, masalah. puluhan web?tak tergantungan bootstrap (css framework), (salah library) demikian terjadi? terpasang.Â meskipun menutup &lt;script&gt;. sebagaimana vital. penempatan salah, harapan.dari permasalahan-permasalahan modern. berita baiknya, solusinya. bundler!Â dengan bundler, terdengar tentang isu-isu keliru. mengumpulkan benar otomatis. fantastic!salah webpack. dynamic (kode tahap production).Â pada tuntas dimulai webpack, penggunaannya, bangun sebelumnya.yok, semangat!apa webpackpada dasarnya, proyek, modul-modul dibungkus (atau lebih) layar.dengan leluasa bergantungan. assets produksi.webpack maret 2012. sepertiÂ browserify. disamping tujuan âbrowserifyâ).secara langsung, browserify sebagaiÂ module bundler. package, menggabungkannya, perintahÂ require(). perintahÂ require()Â tersebut (melalui transpiling).dari konsep, mengkategorikan memproses berkas/modul typescript sass task runner grunt gulp.sekitar 2014 pertengahan para developer. webpack-lah kepopulerannya. 5.outputoutput configuration. nama. standarnya penyimpanannya padaÂ dist lokasiÂ distÂ merupakan webpack.kita mengkonfigurasi propertiÂ outputÂ padaÂ webpack.config.jsÂ seperti require('path');Â module.exports entry:Â './path/to/my/entry/file.js',Â  path: path.resolve(__dirname,Â 'dist'),Â  filename:Â 'my-first-webpack.bundle.js'Â  }};pada menggunakanÂ output.filenameÂ danÂ output.pathÂ properties lokasiÂ static assetsÂ yang dibundel. modulÂ pathÂ yang diimpor menggunakanÂ node.js berkas. mengenaiÂ module path,Â silakan cekÂ https://nodejs.org/api/path.html.jika satuÂ entry point, menggunakanÂ substitutionÂ untuk unik.module.exports entry: app:Â './src/app.js',Â  search:Â './src/search.js'Â  filename:Â '[name].js',Â  __dirname +Â '/dist'Â  }};Â // menghasilkan: ./dist/app.js, ./dist/search.jspropertiÂ outputÂ memiliki konfigurasinya. seputar cek dokumentasi berikut:Â https://webpack.js.org/configuration/output/pluginplugin optimasi bundel, management aset, plugin fleksibel. tulang punggung sistem configuration.webpack methodÂ applyÂ dengan bernamaÂ compiler. ini:Â console-log-on-build-webpack-plugin.jsconst pluginname 'consolelogonbuildwebpackplugin';Â classÂ consolelogonbuildwebpackpluginÂ {Â  constructor(options) this.options options;Â  apply(compiler) compiler.hooks.run.tap(pluginname, compilation Â Â console.log(this.options.message);Â  });Â  }}Â module.exports consolelogonbuildwebpackplugin;ketika configuration, nilaiÂ this.options.messageÂ padaÂ consoleÂ ketika build berjalan.Â untuk terfokus alih-alih, fokuslah keywordÂ newÂ seperti consolelogonbuildwebpackplugin require('./console-log-on-build-webpack-plugin.js');Â module.exports plugins: Â Â newÂ consolelogonbuildwebpackplugin({Â  Â Â Â  message: 'the process starting!'Â  Â Â })Â  ]}banyak plugin, pihak ketiga, sebab itulah, fokus plugin. objekÂ webpackÂ seperti ini.const require('webpack'); built-in pluginsÂ module.exports Â Â newÂ webpack.progressplugin()Â  ]}namun, (di disediakan) memasangnya adalahÂ html-webpack-plugin. html-webpack-plugin --save-devsetelah padaÂ webpack configurationÂ seperti htmlwebpackplugin require('html-webpack-plugin'); //dipasang via npmÂ module.exports newÂ htmlwebpackplugin({Â  Â template:Â './src/index.html',Â  filename:Â 'index.html'Â  })Â  ]};pada melaluiÂ html-webpack-plugin, dibundel.memasang webpacksetelah menyimak core concepts-nya, sebagian mencobanya webclock npm.sebelum ikuti instruksi modulÂ node managerÂ (npm) menghadirkan ini:belum baca padaÂ node managerÂ dan sana. memasangnya.memasang webpackmemasang moment.js. padaÂ devdependenciesÂ karena saja.Â untuk --save-devnpm webpack-cli --save-devatau menyingkat ini:npm packageÂ webpackÂ danÂ webpack-cli, padaÂ devdependenciesÂ di berkasÂ package.json.mengapa webpack? packageÂ webpackÂ danÂ webpack-cli? (command interface). cli config mode build.untuk menambahkanÂ scriptÂ dengan perintahÂ webpackÂ padaÂ package.jsonÂ seperti ini:\"scripts\": \"test\":Â \"echo \\\"error: no test specified\\\" &amp;&amp; exit 1\",Â  \"start\":Â \"http-server .\",Â  \"build\":Â \"webpack\"},kita berkasÂ package.jsonÂ akan ini:{Â  \"name\":Â \"webclock\",Â  \"version\":Â \"1.0.0\",Â  \"description\":Â \"\",Â  \"main\":Â \"index.js\",Â  \"scripts\": \"build\":Â \"webpack\"Â  \"author\":Â \"\",Â  \"license\":Â \"isc\",Â  \"dependencies\": \"moment\":Â \"^2.24.0\"Â  \"devdependencies\": \"webpack\":Â \"^5.1.3\",Â  \"webpack-cli\":Â \"^4.0.0\"Â  build, run buildnamun, ini:dari berikut, tidak/belum menetapkanÂ webpack nilaiÂ entry standar-nya berlokasi index.js.Â error in entry found: error: can't './src' 'c:\\users\\dicoding\\desktop\\webclock'untuk folderÂ srcÂ dan memindahkanÂ index.jsÂ pada scriptÂ build, ini.pada namaÂ dist, berkasÂ main.jsÂ yang bundel pointÂ src index.js.Â jika tampil baca. itu. kodenya, asli tulis.karena membundelÂ module. index.jsÂ dalam npm.import $ 'jquery';import 'moment';Â const 1000);};Â updatetime();kemudian padaÂ index.html, ditujukan main.js.&lt;!doctype src=\"./dist/main.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;lalu buildsetelahÂ buildÂ selesai berkasÂ dist main.jsÂ yang berkasÂ index.html.langkah berikut:https://github.com/dicodingacademy/a163-bfwd-labs/tree/205-webclock-installing-webpackmembuat konfigurasisebelumnya denganÂ zero artinya? configuration sekali.Â zero configurationÂ ini menginjak 4. kekurangan dalamÂ zero configurationÂ adalah inginkan. katakanlah loader configurationÂ kita menerapkannya.kita namaÂ webpack.config.jsÂ pada kita.nama sesuka argumentÂ --configÂ pada cli. nanti. configuration.pada adaÂ entry,Â output,Â loader,Â pluginsÂ danÂ mode. kelima dahuluÂ entryÂ danÂ outputÂ padaÂ webpack berkasÂ webpack.config.js.const entry:Â './src/index.js',Â  filename:Â 'bundle.js'Â  }};secara default, propertiÂ entryÂ sebagai bundle utama. nilaiÂ outputÂ sebagai dariÂ main.jsÂ (nilai standar) menjadiÂ bundle.js. scriptÂ buildÂ di dengan:npm buildmaka bernamaÂ bundle.js.namun, target dilampirkan padaÂ index.htmlÂ menjadiÂ bundle.js.&lt;!doctype src=\"./dist/bundle.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;jika membukaÂ index.htmlÂ maka menjadiÂ bundle.js.pada bundle, terdapatÂ warningÂ yang menetapkanÂ modeÂ pada berkasÂ webpack configuration.jika propertiÂ modeÂ maka diterapkan, nilaiÂ production. ketimbang propertiÂ mode, modenya muncul warning (pesan peringatan) tentangnya. propertiÂ modeÂ dengan nilaiÂ productionÂ seperti mode:Â 'production'};lalu, scriptÂ build. propertiÂ modeÂ tidak berjalan.catatan:sebenarnya ukuranÂ bundle.jsÂ sudah melampaui batas. berkasÂ bundle.js. sebelumnya.hal disebabkan tulis ketergantungan (dependencies) moment. berkasÂ bundle.jsÂ menjadi bengkak ukurannya.ini hindari bawa tingkat production. membengkaknya berkasÂ bundle.js, performa nantinya.langkah berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/206-webclock-webpack-configuration-fileswebpack dev serversaat hasilnya. peduli mayor sekadar ganti warna memperbaharui merepotkan, bukan?untunglah live-reloading mempercepat perintahÂ build.untuk packageÂ webpack-dev-serverÂ padaÂ devdependenciesÂ menggunakan npm.npm webpack-dev-server memasangnya, scriptÂ start-devÂ dengan âwebpack serveâ padaÂ package.json.\"scripts\": \"build\":Â \"webpack\",Â  \"start-dev\":Â \"webpack serve\"}mari start-devsetelah alamatÂ localhost:8080Â di alamat kembangkan berikut.mantab! tetapi, kenapa halaman overlay pesan-pesan peringatan ini? compile penyelesaian âxâ pojok atas.namun, munculnya selesai, menyembunyikannya tambahan. bernamaÂ devserver. require('path');const require('html-webpack-plugin');Â module.exports ..... mode: 'production', devserver: client: overlay: errors: true, warnings: false, */}kemudian, refresh halaman. mematikan menjalankanÂ npm start-devÂ kembali bukaÂ localhost:8080Â kembali, kembali.devserver: Â Â errors: false,Â  },},pada false propertiÂ warningsÂ tetapi propertiÂ errors. dimaksudkan menyembunyikan error. kesalahan sajalah overlay.webpack fiturÂ live-reloading. (html, css, js) perubahannya (save), prosesÂ compilingÂ ulang browser.namun prosesÂ compilingÂ memakan demikian?hal modeÂ productionÂ dalam production bundling seoptimal modeÂ development. menggunakanÂ babel-loader. compiling terasa transpiling melaluiÂ babel-loader.Â solusinya, pisahkanÂ webpack configurationÂ untuk production.catatan:untuk serviceÂ webpack-dev-server, ctrl+c ingatlah hentikan serviceÂ webpack-dev-serverÂ setiap configuration.langkah berikut:https://github.com/dicodingacademy/a163-bfwd-labs/tree/209-webclock-webpack-dev-servermengonfigurasi environmenttujuan dariÂ developmentÂ danÂ productionÂ memanglah tahapÂ developmentÂ webpack optimal (hot reloading). kompatibilitasnya keduanya.namun berpatokan (common) sepertiÂ entry,Â output,Â style-loader,Â css-loaderÂ danÂ htmlwebpackplugin. menghindari bernamaÂ webpack-mergeÂ yang environment-nya.Â menggunakan webpack-mergeuntuk menggunakanÂ webpack-mergeÂ langkah padaÂ devdependenciesÂ menggunakan webpack-merge --save-devkemudian namaÂ webpack.common.js.di ituÂ productionÂ atauÂ development.const './src/index.js', filename: 'bundle.js', path.resolve(__dirname, 'dist'), module: rules: and test: /\\.css$/, use: loader: 'style-loader', 'css-loader', htmlwebpackplugin({ template: './src/template.html', 'index.html', }), ],};kemudian configurationÂ baru namaÂ webpack.prod.jsÂ danÂ webpack.dev.js.kemudian berikut:webpack.prod.jswebpack.dev.jsconst merge require('webpack-merge');constÂ common =Â require('./webpack.common.js');Â module.exports merge(common, mode:Â 'production',Â  babel */Â  test:Â /\\.js$/,Â  exclude:Â /node_modules/,Â  loader:Â 'babel-loader',Â  options: presets: ['@babel/preset-env'],Â  ],Â  },});di berkasÂ webpack.common.jsÂ kita nilaiÂ entry,Â outputÂ beberapaÂ loader, danÂ pluginÂ yang environment. menetapkannya environment-nya.perhatikan menggunakanÂ merge()Â dari packageÂ webpack-merge, environment-nya.module.exports ... );setelah environment, scriptÂ buildÂ danÂ start-devÂ padaÂ package.jsonÂ menjadi \"build\": \"webpack --config webpack.prod.js\", \"start-dev\": serve webpack.dev.js\"}dengan flagÂ --config [config-files]Â pada scriptÂ buildÂ danÂ start-dev, berkasÂ webpack.config.jsÂ karena configuration.coba scriptÂ start-devÂ ya. fiturÂ live-reloadingÂ akan cepat.langkah berikut:https://github.com/dicodingacademy/a163-bfwd-labs/tree/210-webclock-webpack-merge/webclockrangkuman webpackuntuk dipelajari.apa webpackwebpack fungsinya menggabung berbagai dokumen statis.core conceptsentry: titik dianalisa dependency graph.output: statis point.loaders: transformasi json produksi.plugin: manajemen aset dsb.mode: acuan prosesnya. production, development, none.memasang --save-dev. command interface (cli).webpack khusus, zero alangkah namaÂ webpack.config.js.untuk advance, konfigurasinya maksimal.menggunakan interface) perintahÂ npx help.penggunaan loaderloader menerapkannya (package) menangapi dituju.Â contohnya css-loader style-loader.penggunaan pluginplugin memaksimalkan bundling. membuatkan menyematkan html.penerapan serverwebpack dituliskan, minor mayor.untuk --save-dev.untuk menjalankannya, serveÂ di terminal.splitting based on modeterdapat none. berbeda-beda. duplikasi mengatasinya webpack-merge.untuk --save-dev.asynchronous requestpendahuluan requestsingle page app (spa) tren terkini kah spa?secara tradisional di-renderÂ dari sisi client. client (browser) bertugas menerjemahkan jendela interaksi form input, terbaru. melakukanÂ reloadÂ sebelum datanya. 2000-an.sebenarnya 90an, tim microsoft outlook xmlhttp internet explorer membangun mail web. diadaptasi sebagaiÂ xmlhttprequestÂ (xhr).dengan menggunakanÂ xhr, request memperbarui ditampilkan.Â xhrÂ dapat secaraÂ asynchronousÂ sehingga pengguna komunikasi spa.sebelumÂ jsonÂ menjadi ecma 2013, xml denganÂ asynchronous xmlÂ atau disingkat ajax.pada kemunculan ajax, yaituÂ fetch.Â fetchÂ lebih fleksibel daripadaÂ xhrÂ karena asynchronous.saat xml. ajax json. menggunakanÂ xhrÂ danÂ fetchÂ untuk konten cepat.corssebelum langkah-langkah api, perihal keamanan. response network tabs devtools.hal diproses mengontrolnya. keamanan, xhr fetch, diperbolehkan domain sama.contoh bersumber dariÂ google.com/api, menjadiÂ google.com. berbeda,Â contohnya bing.com, padaÂ google.com/api. dikenal sebagaiÂ same-origin policy.namun, penyedia teknologi (cross-origin resource sharing) server-nya. mengelakkan kebijakan same-origin dalamnya.web apispada sumber berasal? mengaksesnya? menjawab semua, api.web (application programming miliki web, lainnya.penyedia keuntungan efisien. macam perangkat atas.pada ilustrasi pola (representational state transfer). simpel jenis text, xml.pola sepenuhnya datanya berkomunikasi (aplikasi) endpoint (url) endpoint-nya.terdapat tipe/method request, data. berikut.getÂ : api.postÂ : data.putÂ : data.deleteÂ : data.setelah response. status gagal. api.200 (ok) dipenuhi (web api).400 (bad request) mengerti client.401 (unauthorized) membutuhkanÂ authorization.403 (forbidden) menolak memprosesnya boleh dilakukan.404 (not found) minta, ditemukan.500 (server error) kendala request.banyak cuma-cuma umum. keperluan internal private, terhalangi olehÂ same-origin policy.persiapan menampilkan, menambah, buku.untuk dahuluÂ project starter-nya. berikut:Â dicodingbooks.setelah mengunduhnya, ekstrak mencontohkan padaÂ c users dicoding desktop.setelah ekstrak, namaÂ dicodingbooks.buka (yang dibuka proyek) installperintah diÂ devdependenciesÂ danÂ dependenciesÂ pada folderÂ node_modulesÂ beserta package-package (folder) books.sebagaimana pelajari. padaÂ local terminal.npm start-devbuka arahkan alamatÂ localhost:8080. books ini.ini dicontohkan source main.js, functionÂ main().function main() getbook sini! insertbook (book) updatebook removebook (bookid) //.....}Â export main;nah, melengkapi book diharapkan.kita padaÂ main.js, ini:/* ya!*/Â  renderallbooks (books) listbookelement document.queryselector('#listbook'); listbookelement.innerhtml books.foreach(book class=\"col-lg-4 col-md-6 col-sm-12\" style=\"margin-top: 12px;\"&gt; class=\"card\"&gt; class=\"card-body\"&gt; &lt;h5&gt;(${book.id}) ${book.title}&lt;/h5&gt; &lt;p&gt;${book.author}&lt;/p&gt; type=\"button\" class=\"btn btn-danger button-delete\" id=\"${book.id}\"&gt;hapus&lt;/button&gt; buttons document.queryselectorall('.button-delete'); buttons.foreach(button button.addeventlistener('click', bookid event.target.id; removebook(bookid); showresponsemessage (message 'check connection') alert(message); document.addeventlistener('domcontentloaded', inputbookid document.queryselector('#inputbookid'); inputbooktitle document.queryselector('#inputbooktitle'); inputbookauthor document.queryselector('#inputbookauthor'); buttonsave document.queryselector('#buttonsave'); buttonupdate document.queryselector('#buttonupdate'); buttonsave.addeventlistener('click', id: number.parseint(inputbookid.value), title: inputbooktitle.value, author: inputbookauthor.value insertbook(book); buttonupdate.addeventlistener('click', updatebook(book); getbook(); });}Â export main;fungsi-fungsi fungsiÂ renderallbooksÂ digunakan merender diperoleh fungsiÂ showresponsemessageÂ digunakan menampilkanÂ window.alert()Â dengan diambil fungsinya.kemudian, eventÂ domcontentloadedÂ terdapat elemenÂ &lt;input&gt;Â danÂ &lt;button&gt;Â yang semestinya, obyekÂ bookÂ baru keÂ updatebookÂ danÂ insertbook.lalu, index.js./*Â  ya!*/Â import 'regenerator-runtime';import 'bootstrap/dist/css/bootstrap.min.css';import './styles/main.css';import './scripts/main';Â main();berkas books. sebatas aplikasinya. configuration.anda mempelajari atas,Â janganÂ anda ya.sudah ajax? ya!ajax xhrxmlhttprequest penamaannya, beranggapan kenyataannya, format, xml.walaupun (fetch api), alasannya dukungan fetch lakukan, sepertiÂ tracking upload progress.penggunaan dasarxmlhttprequestÂ dapat secaraÂ synchronousÂ maupunÂ asynchronous. asynchronous.contoh dariÂ xmlhttprequestÂ seperti berikut.langkah menggunakanÂ xmlhttprequestÂ adalah xmlhttprequest();lalu, (xhr) (onload) (onerror).xhr.onload console.log(this.responsetext);};Â xhr.onerror =Â functionÂ () console.log('ups something error');};di dalamÂ callback functionÂ tersebut, dariÂ thisÂ merupakan sehinggaÂ this.responsetextÂ akan text) server.catatan:dikarenakan nilaiÂ thisÂ di functionÂ tersebut obyek, menuliskanÂ callback function-nya.xhr.onload error, this.Â  console.log(this.responsetext);};selanjutnya, url dituju methodÂ open().xhr.open('get', 'https://api-to-call.com/endpoint');nah, mengirimkan methodÂ send().xhr.send();jadi, dariÂ xmlhttprequestÂ dengan berikutÂ https://books-api.dicoding.dev/listÂ adalah xmlhttprequest();Â xhr.onload Â console.log(this.responsetext);};Â xhr.onerror Â console.log('ups error');};Â xhr.open('get',Â 'https://books-api.dicoding.dev/list');xhr.send();coba lakukanÂ copyÂ danÂ pasteÂ pada (devtools). string. olah mengubahnya methodÂ json.parse().json.parse(this.responsetext)anda berikut:https://codesandbox.io/s/163-7309-ajax-xhr-basic-jsdl71melengkapi updatebookfungsi lengkapi fungsiÂ updatebook. buku mengubahÂ titleÂ atauÂ authorÂ dari api. menyebutkan ketentuan berikut:endpoint :Â /edit/:idmethod:Â putheader:content-type:Â application/jsonx-auth-token:Â 12345body: Â {\"id\" \"title\" \"author\" }dari didapatkan put xmlhttprequestÂ  constÂ xhr =Â newÂ xmlhttprequest();Â Â  //menetapkan sukses errorÂ  xhr.onload =Â function constÂ responsejson =Â json.parse(this.responsetext);Â  showresponsemessage(responsejson.message);Â  getbook();Â  };Â Â  xhr.onerror Â showresponsemessage();Â  urlÂ  xhr.open('put',Â `${baseurl}/edit/${book.id}`);Â  mementapkan content-type x-auth-token header requestÂ  xhr.setrequestheader('content-type',Â 'application/json');Â  xhr.setrequestheader('x-auth-token',Â '12345');Â Â  json.stringify(book) bodyÂ  xhr.send(json.stringify(book));};jika fungsiÂ insertbook, url-nya.silakan simpan buku.ajax fetchsetelah menggunakanÂ xmlhttprequest, berpikir, âadakah langkah?â. ada! fetch!fetch denganÂ fetchÂ kita membuatÂ http requestÂ lebih membuatÂ instanceÂ dan jauh adalahÂ fetchÂ memanfaatkan callback, gayaÂ synchronousÂ menggunakanÂ asyncÂ danÂ await. kan?dasar fetchseperti tugasnya berjalanÂ asynchronous.penggunaan dariÂ fetchÂ tampak ini:network fungsiÂ fetch()Â tereksekusi.fetch('https://books-api.dicoding.dev/list');jika fungsiÂ fetch()Â akan mengembalikanÂ promise resolveÂ dan membawaÂ responseÂ object nilaiÂ responseÂ yang dibawaÂ resolveÂ belum butuhkan, melainkan mengenaiÂ responseÂ itu sendiri, sepertiÂ status code,Â target url,Â headers, methodÂ json().fetch('https://books-api.dicoding.dev/list')Â  .then(response Â returnÂ response.json();Â  });methodÂ json()Â juga membutuhkanÂ chaining promiseÂ dengan menambahkanÂ then()Â untuk sesungguhnya.fetch('https://books-api.dicoding.dev/list') response.json(); .then(responsejson console.log(responsejson); });lalu, blockÂ catch()Â pada akhirÂ chaining promiseÂ untuk apabilaÂ rejected promiseÂ terjadi, fungsiÂ fetch()Â atauÂ json().fetch('https://books-api.dicoding.dev/list') .catch(error console.log(error); });karena async/await synchronous.async/awaitpromiseasync getbooks() fetch('https://books-api.dicoding.dev/list'); responsejson (error) }}Â getbooks();anda berikut:https://codesandbox.io/s/163-7365-ajax-fetch-basic-8c09iomengubah getbookkita fungsiÂ getbook. xmlhttprequest xmlhttprequest();Â  json.parse(this.responsetext); (responsejson.error) showresponsemessage(responsejson.message); renderallbooks(responsejson.books); showresponsemessage(); xhr.open('get', `${baseurl}/list`);Â  xhr.send();};ayo refactor menerapkanÂ fetchÂ secara perlahan.langkah fungsiÂ fetch()Â di instanceÂ xhr. dariÂ baseurlÂ danÂ endpointÂ sebagai parameternya.const fetch(`${baseurl}/list`);Â  //....};seperti dilakukan. respon tambahkanÂ chaining methodÂ then()Â yang variabelÂ responseÂ sebagaiÂ response objectÂ yang didapat.const fetch(`${baseurl}/list`) {}); ....};kemudian blokÂ then()Â tersebut, nilaiÂ responseÂ menjadi methodÂ response.json().const ....};lalu kembalikan (return) blokÂ then()Â dengan tersebut,const ....};karena methodÂ response.json()Â juga menambahkanÂ then()Â lainnya (chaining promise). dalamÂ then()Â yang namaÂ responsejsonÂ (penamaan tidaklah baku, variabelnya).const ....}responsejsonÂ merupakan methodÂ json()Â tadi.selanjutnya, callbackÂ xhr.onloadÂ ke blokÂ then()Â yang kedua.const ....};hapus json.parse(this.responsetext);karena pengubahan melaluiÂ json.parse().terakhir methodÂ catch()Â dengan parameterÂ errorÂ pada chaining, flow rejection padaÂ fetch()Â atauÂ json().const .......};pada fungsiÂ showresponsemessage()Â dengan memberikanÂ errorÂ sebagai fungsinya.const showresponsemessage(error); .....};penerapanÂ fetchÂ sudah yay! pengiriman leluasa. fungsiÂ getbookÂ akan });};simpan mestinya.jika menggunakanÂ async/await. fungsiÂ getbookÂ tampak fetch(`${baseurl}/list`); }};mengubah updatebookselanjutnya xhr.open('put', `${baseurl}/edit/${book.id}`);Â  xhr.setrequestheader('content-type', 'application/json'); xhr.setrequestheader('x-auth-token', '12345');Â  xhr.send(json.stringify(book));};ayo fetch(`${baseurl}/edit/${book.id}`);Â  xmlhttprequest(); fungsiÂ updatebookÂ kita requestÂ put, menetapkanÂ optionsÂ pada fungsiÂ fetchÂ seperti fetch(`${baseurl}/edit/${book.id}`, method: 'put' yaituÂ content-typeÂ dengan âapplication/jsonâ danÂ x-auth-tokenÂ dengan â12345â,Â maka propertiÂ headersÂ padaÂ optionsÂ seperti 'put', headers: 'content-type': 'application/json', 'x-auth-token': '12345' .....};selanjutnya, pindahkan dataÂ bodyÂ yang melaluiÂ xhrÂ pada methodÂ send()Â ke propertyÂ bodyÂ di dalamÂ objectÂ optionsÂ dari fetch.const body: .....};konfigurasiÂ optionsÂ sudah selesai! fungsiÂ insertbook.const }).then(response }).then(responsejson }).catch(error });};penerapanÂ fetchÂ sudah menggunakanÂ xhrÂ dengan fungsiÂ updatebookÂ akan fungsiÂ updatebookÂ tampak options options); response.json();Â  }};latihan: findervoila!Â anda ujung menuju submission, finder.jauh menerapkannya?untuk publik team olahraga.Â sport dicodingÂ merupakan olahraga daftar, logo, olahraga. sport inspirasi dariÂ thesportdbÂ yang berbayar.untuk public dokumentasinya berikut:Â https://sports-api.dicoding.dev/jika luck!Â mengubah removebookterakhir fungsiÂ removebook. delete xhr.open('delete', `${baseurl}/delete/${bookid}`);Â  fetch(`${baseurl}/delete/${bookid}`);Â  .....};dikarenakan requestÂ delete, fetch(`${baseurl}/delete/${bookid}`, 'delete' .....};lalu, yaituÂ x-auth-tokenÂ dengan â12345â.Â kemudian, 'delete', fungsiÂ insertbookÂ ataupunÂ getbook.const fungsiÂ removebookÂ akan mestinya.penerapan berikut:Â https://github.com/dicodingacademy/a163-bfwd-labs/tree/303-dicoding-books-fetch"},{"id":"item5488fd2d-2976-4bf3-9925-e","title":"Page","created":1723216766,"location":"item-5488fd2d-2976-4bf3-9925-ebae7a26b8ef","description":"\n\n","text":""},{"id":"item72a5228c-d0bd-4b96-a124-f","title":"Lesson 1","created":1723216821,"location":"item-72a5228c-d0bd-4b96-a124-f64e18dea25a","description":"","text":""},{"id":"item52e57103-e309-4136-8c2e-f","title":"Introduction","created":1723216821,"location":"item-52e57103-e309-4136-8c2e-fbb29983a013","description":"","text":""}]